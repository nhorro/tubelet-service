// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tubelet_service.proto

#include "tubelet_service.pb.h"
#include "tubelet_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tubelet_service {

static const char* tubelet_service_method_names[] = {
  "/tubelet_service.tubelet_service/get_version",
  "/tubelet_service.tubelet_service/add_observation2d",
  "/tubelet_service.tubelet_service/get_all_tubelets2d",
  "/tubelet_service.tubelet_service/reset",
  "/tubelet_service.tubelet_service/clip",
  "/tubelet_service.tubelet_service/move_window",
  "/tubelet_service.tubelet_service/set_window_position",
};

std::unique_ptr< tubelet_service::Stub> tubelet_service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< tubelet_service::Stub> stub(new tubelet_service::Stub(channel));
  return stub;
}

tubelet_service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_get_version_(tubelet_service_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_add_observation2d_(tubelet_service_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_all_tubelets2d_(tubelet_service_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_reset_(tubelet_service_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clip_(tubelet_service_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_move_window_(tubelet_service_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_window_position_(tubelet_service_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status tubelet_service::Stub::get_version(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::tubelet_service::get_version_response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_get_version_, context, request, response);
}

void tubelet_service::Stub::experimental_async::get_version(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_version_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::get_version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::get_version_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_version_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::get_version(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_get_version_, context, request, response, reactor);
}

void tubelet_service::Stub::experimental_async::get_version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::get_version_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_get_version_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::get_version_response>* tubelet_service::Stub::Asyncget_versionRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::get_version_response>::Create(channel_.get(), cq, rpcmethod_get_version_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::get_version_response>* tubelet_service::Stub::PrepareAsyncget_versionRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::get_version_response>::Create(channel_.get(), cq, rpcmethod_get_version_, context, request, false);
}

::grpc::Status tubelet_service::Stub::add_observation2d(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request& request, ::tubelet_service::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_add_observation2d_, context, request, response);
}

void tubelet_service::Stub::experimental_async::add_observation2d(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_add_observation2d_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::add_observation2d(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_add_observation2d_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::add_observation2d(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_add_observation2d_, context, request, response, reactor);
}

void tubelet_service::Stub::experimental_async::add_observation2d(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_add_observation2d_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* tubelet_service::Stub::Asyncadd_observation2dRaw(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::Empty>::Create(channel_.get(), cq, rpcmethod_add_observation2d_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* tubelet_service::Stub::PrepareAsyncadd_observation2dRaw(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::Empty>::Create(channel_.get(), cq, rpcmethod_add_observation2d_, context, request, false);
}

::grpc::Status tubelet_service::Stub::get_all_tubelets2d(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::tubelet_service::get_all_tubelets2d_response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_get_all_tubelets2d_, context, request, response);
}

void tubelet_service::Stub::experimental_async::get_all_tubelets2d(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_all_tubelets2d_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::get_all_tubelets2d(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::get_all_tubelets2d_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_all_tubelets2d_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::get_all_tubelets2d(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_get_all_tubelets2d_, context, request, response, reactor);
}

void tubelet_service::Stub::experimental_async::get_all_tubelets2d(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::get_all_tubelets2d_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_get_all_tubelets2d_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::get_all_tubelets2d_response>* tubelet_service::Stub::Asyncget_all_tubelets2dRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::get_all_tubelets2d_response>::Create(channel_.get(), cq, rpcmethod_get_all_tubelets2d_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::get_all_tubelets2d_response>* tubelet_service::Stub::PrepareAsyncget_all_tubelets2dRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::get_all_tubelets2d_response>::Create(channel_.get(), cq, rpcmethod_get_all_tubelets2d_, context, request, false);
}

::grpc::Status tubelet_service::Stub::reset(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::tubelet_service::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_reset_, context, request, response);
}

void tubelet_service::Stub::experimental_async::reset(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_reset_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_reset_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::reset(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_reset_, context, request, response, reactor);
}

void tubelet_service::Stub::experimental_async::reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_reset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* tubelet_service::Stub::AsyncresetRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::Empty>::Create(channel_.get(), cq, rpcmethod_reset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* tubelet_service::Stub::PrepareAsyncresetRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::Empty>::Create(channel_.get(), cq, rpcmethod_reset_, context, request, false);
}

::grpc::Status tubelet_service::Stub::clip(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::tubelet_service::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_clip_, context, request, response);
}

void tubelet_service::Stub::experimental_async::clip(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_clip_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::clip(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_clip_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::clip(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_clip_, context, request, response, reactor);
}

void tubelet_service::Stub::experimental_async::clip(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_clip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* tubelet_service::Stub::AsyncclipRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::Empty>::Create(channel_.get(), cq, rpcmethod_clip_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* tubelet_service::Stub::PrepareAsyncclipRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::Empty>::Create(channel_.get(), cq, rpcmethod_clip_, context, request, false);
}

::grpc::Status tubelet_service::Stub::move_window(::grpc::ClientContext* context, const ::tubelet_service::move_window_request& request, ::tubelet_service::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_move_window_, context, request, response);
}

void tubelet_service::Stub::experimental_async::move_window(::grpc::ClientContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_move_window_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::move_window(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_move_window_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::move_window(::grpc::ClientContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_move_window_, context, request, response, reactor);
}

void tubelet_service::Stub::experimental_async::move_window(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_move_window_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* tubelet_service::Stub::Asyncmove_windowRaw(::grpc::ClientContext* context, const ::tubelet_service::move_window_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::Empty>::Create(channel_.get(), cq, rpcmethod_move_window_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* tubelet_service::Stub::PrepareAsyncmove_windowRaw(::grpc::ClientContext* context, const ::tubelet_service::move_window_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::Empty>::Create(channel_.get(), cq, rpcmethod_move_window_, context, request, false);
}

::grpc::Status tubelet_service::Stub::set_window_position(::grpc::ClientContext* context, const ::tubelet_service::set_window_position_request& request, ::tubelet_service::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_set_window_position_, context, request, response);
}

void tubelet_service::Stub::experimental_async::set_window_position(::grpc::ClientContext* context, const ::tubelet_service::set_window_position_request* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_set_window_position_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::set_window_position(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_set_window_position_, context, request, response, std::move(f));
}

void tubelet_service::Stub::experimental_async::set_window_position(::grpc::ClientContext* context, const ::tubelet_service::set_window_position_request* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_set_window_position_, context, request, response, reactor);
}

void tubelet_service::Stub::experimental_async::set_window_position(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_set_window_position_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* tubelet_service::Stub::Asyncset_window_positionRaw(::grpc::ClientContext* context, const ::tubelet_service::set_window_position_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::Empty>::Create(channel_.get(), cq, rpcmethod_set_window_position_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* tubelet_service::Stub::PrepareAsyncset_window_positionRaw(::grpc::ClientContext* context, const ::tubelet_service::set_window_position_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tubelet_service::Empty>::Create(channel_.get(), cq, rpcmethod_set_window_position_, context, request, false);
}

tubelet_service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tubelet_service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tubelet_service::Service, ::tubelet_service::Empty, ::tubelet_service::get_version_response>(
          std::mem_fn(&tubelet_service::Service::get_version), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tubelet_service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tubelet_service::Service, ::tubelet_service::add_observation2d_request, ::tubelet_service::Empty>(
          std::mem_fn(&tubelet_service::Service::add_observation2d), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tubelet_service_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tubelet_service::Service, ::tubelet_service::Empty, ::tubelet_service::get_all_tubelets2d_response>(
          std::mem_fn(&tubelet_service::Service::get_all_tubelets2d), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tubelet_service_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tubelet_service::Service, ::tubelet_service::Empty, ::tubelet_service::Empty>(
          std::mem_fn(&tubelet_service::Service::reset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tubelet_service_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tubelet_service::Service, ::tubelet_service::Empty, ::tubelet_service::Empty>(
          std::mem_fn(&tubelet_service::Service::clip), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tubelet_service_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tubelet_service::Service, ::tubelet_service::move_window_request, ::tubelet_service::Empty>(
          std::mem_fn(&tubelet_service::Service::move_window), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tubelet_service_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tubelet_service::Service, ::tubelet_service::set_window_position_request, ::tubelet_service::Empty>(
          std::mem_fn(&tubelet_service::Service::set_window_position), this)));
}

tubelet_service::Service::~Service() {
}

::grpc::Status tubelet_service::Service::get_version(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status tubelet_service::Service::add_observation2d(::grpc::ServerContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status tubelet_service::Service::get_all_tubelets2d(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status tubelet_service::Service::reset(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status tubelet_service::Service::clip(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status tubelet_service::Service::move_window(::grpc::ServerContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status tubelet_service::Service::set_window_position(::grpc::ServerContext* context, const ::tubelet_service::set_window_position_request* request, ::tubelet_service::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tubelet_service

