// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tubelet_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tubelet_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tubelet_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tubelet_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tubelet_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tubelet_5fservice_2eproto;
namespace tubelet_service {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class add_observation2d_request;
class add_observation2d_requestDefaultTypeInternal;
extern add_observation2d_requestDefaultTypeInternal _add_observation2d_request_default_instance_;
class get_all_tubelets2d_response;
class get_all_tubelets2d_responseDefaultTypeInternal;
extern get_all_tubelets2d_responseDefaultTypeInternal _get_all_tubelets2d_response_default_instance_;
class get_version_response;
class get_version_responseDefaultTypeInternal;
extern get_version_responseDefaultTypeInternal _get_version_response_default_instance_;
class move_window_request;
class move_window_requestDefaultTypeInternal;
extern move_window_requestDefaultTypeInternal _move_window_request_default_instance_;
class observation;
class observationDefaultTypeInternal;
extern observationDefaultTypeInternal _observation_default_instance_;
class point2d;
class point2dDefaultTypeInternal;
extern point2dDefaultTypeInternal _point2d_default_instance_;
class tubelet2d;
class tubelet2dDefaultTypeInternal;
extern tubelet2dDefaultTypeInternal _tubelet2d_default_instance_;
}  // namespace tubelet_service
PROTOBUF_NAMESPACE_OPEN
template<> ::tubelet_service::Empty* Arena::CreateMaybeMessage<::tubelet_service::Empty>(Arena*);
template<> ::tubelet_service::add_observation2d_request* Arena::CreateMaybeMessage<::tubelet_service::add_observation2d_request>(Arena*);
template<> ::tubelet_service::get_all_tubelets2d_response* Arena::CreateMaybeMessage<::tubelet_service::get_all_tubelets2d_response>(Arena*);
template<> ::tubelet_service::get_version_response* Arena::CreateMaybeMessage<::tubelet_service::get_version_response>(Arena*);
template<> ::tubelet_service::move_window_request* Arena::CreateMaybeMessage<::tubelet_service::move_window_request>(Arena*);
template<> ::tubelet_service::observation* Arena::CreateMaybeMessage<::tubelet_service::observation>(Arena*);
template<> ::tubelet_service::point2d* Arena::CreateMaybeMessage<::tubelet_service::point2d>(Arena*);
template<> ::tubelet_service::tubelet2d* Arena::CreateMaybeMessage<::tubelet_service::tubelet2d>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tubelet_service {

// ===================================================================

class Empty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tubelet_service.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tubelet_service.Empty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tubelet_5fservice_2eproto);
    return ::descriptor_table_tubelet_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tubelet_service.Empty)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tubelet_5fservice_2eproto;
};
// -------------------------------------------------------------------

class point2d :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tubelet_service.point2d) */ {
 public:
  point2d();
  virtual ~point2d();

  point2d(const point2d& from);
  point2d(point2d&& from) noexcept
    : point2d() {
    *this = ::std::move(from);
  }

  inline point2d& operator=(const point2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline point2d& operator=(point2d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const point2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const point2d* internal_default_instance() {
    return reinterpret_cast<const point2d*>(
               &_point2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(point2d* other);
  friend void swap(point2d& a, point2d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline point2d* New() const final {
    return CreateMaybeMessage<point2d>(nullptr);
  }

  point2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<point2d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const point2d& from);
  void MergeFrom(const point2d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(point2d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tubelet_service.point2d";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tubelet_5fservice_2eproto);
    return ::descriptor_table_tubelet_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:tubelet_service.point2d)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tubelet_5fservice_2eproto;
};
// -------------------------------------------------------------------

class observation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tubelet_service.observation) */ {
 public:
  observation();
  virtual ~observation();

  observation(const observation& from);
  observation(observation&& from) noexcept
    : observation() {
    *this = ::std::move(from);
  }

  inline observation& operator=(const observation& from) {
    CopyFrom(from);
    return *this;
  }
  inline observation& operator=(observation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const observation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const observation* internal_default_instance() {
    return reinterpret_cast<const observation*>(
               &_observation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(observation* other);
  friend void swap(observation& a, observation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline observation* New() const final {
    return CreateMaybeMessage<observation>(nullptr);
  }

  observation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<observation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const observation& from);
  void MergeFrom(const observation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(observation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tubelet_service.observation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tubelet_5fservice_2eproto);
    return ::descriptor_table_tubelet_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double prob = 2;
  void clear_prob();
  static const int kProbFieldNumber = 2;
  double prob() const;
  void set_prob(double value);

  // uint32 class_index = 1;
  void clear_class_index();
  static const int kClassIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 class_index() const;
  void set_class_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:tubelet_service.observation)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double prob_;
  ::PROTOBUF_NAMESPACE_ID::uint32 class_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tubelet_5fservice_2eproto;
};
// -------------------------------------------------------------------

class tubelet2d :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tubelet_service.tubelet2d) */ {
 public:
  tubelet2d();
  virtual ~tubelet2d();

  tubelet2d(const tubelet2d& from);
  tubelet2d(tubelet2d&& from) noexcept
    : tubelet2d() {
    *this = ::std::move(from);
  }

  inline tubelet2d& operator=(const tubelet2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline tubelet2d& operator=(tubelet2d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tubelet2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tubelet2d* internal_default_instance() {
    return reinterpret_cast<const tubelet2d*>(
               &_tubelet2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(tubelet2d* other);
  friend void swap(tubelet2d& a, tubelet2d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tubelet2d* New() const final {
    return CreateMaybeMessage<tubelet2d>(nullptr);
  }

  tubelet2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tubelet2d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tubelet2d& from);
  void MergeFrom(const tubelet2d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tubelet2d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tubelet_service.tubelet2d";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tubelet_5fservice_2eproto);
    return ::descriptor_table_tubelet_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tubelet_service.observation observations = 2;
  int observations_size() const;
  void clear_observations();
  static const int kObservationsFieldNumber = 2;
  ::tubelet_service::observation* mutable_observations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tubelet_service::observation >*
      mutable_observations();
  const ::tubelet_service::observation& observations(int index) const;
  ::tubelet_service::observation* add_observations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tubelet_service::observation >&
      observations() const;

  // .tubelet_service.point2d pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  const ::tubelet_service::point2d& pos() const;
  ::tubelet_service::point2d* release_pos();
  ::tubelet_service::point2d* mutable_pos();
  void set_allocated_pos(::tubelet_service::point2d* pos);

  // @@protoc_insertion_point(class_scope:tubelet_service.tubelet2d)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tubelet_service::observation > observations_;
  ::tubelet_service::point2d* pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tubelet_5fservice_2eproto;
};
// -------------------------------------------------------------------

class get_version_response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tubelet_service.get_version_response) */ {
 public:
  get_version_response();
  virtual ~get_version_response();

  get_version_response(const get_version_response& from);
  get_version_response(get_version_response&& from) noexcept
    : get_version_response() {
    *this = ::std::move(from);
  }

  inline get_version_response& operator=(const get_version_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_version_response& operator=(get_version_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_version_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const get_version_response* internal_default_instance() {
    return reinterpret_cast<const get_version_response*>(
               &_get_version_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(get_version_response* other);
  friend void swap(get_version_response& a, get_version_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline get_version_response* New() const final {
    return CreateMaybeMessage<get_version_response>(nullptr);
  }

  get_version_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_version_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_version_response& from);
  void MergeFrom(const get_version_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_version_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tubelet_service.get_version_response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tubelet_5fservice_2eproto);
    return ::descriptor_table_tubelet_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // @@protoc_insertion_point(class_scope:tubelet_service.get_version_response)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tubelet_5fservice_2eproto;
};
// -------------------------------------------------------------------

class add_observation2d_request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tubelet_service.add_observation2d_request) */ {
 public:
  add_observation2d_request();
  virtual ~add_observation2d_request();

  add_observation2d_request(const add_observation2d_request& from);
  add_observation2d_request(add_observation2d_request&& from) noexcept
    : add_observation2d_request() {
    *this = ::std::move(from);
  }

  inline add_observation2d_request& operator=(const add_observation2d_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline add_observation2d_request& operator=(add_observation2d_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const add_observation2d_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const add_observation2d_request* internal_default_instance() {
    return reinterpret_cast<const add_observation2d_request*>(
               &_add_observation2d_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(add_observation2d_request* other);
  friend void swap(add_observation2d_request& a, add_observation2d_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline add_observation2d_request* New() const final {
    return CreateMaybeMessage<add_observation2d_request>(nullptr);
  }

  add_observation2d_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<add_observation2d_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const add_observation2d_request& from);
  void MergeFrom(const add_observation2d_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(add_observation2d_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tubelet_service.add_observation2d_request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tubelet_5fservice_2eproto);
    return ::descriptor_table_tubelet_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tubelet_service.point2d pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  const ::tubelet_service::point2d& pos() const;
  ::tubelet_service::point2d* release_pos();
  ::tubelet_service::point2d* mutable_pos();
  void set_allocated_pos(::tubelet_service::point2d* pos);

  // .tubelet_service.observation obs = 2;
  bool has_obs() const;
  void clear_obs();
  static const int kObsFieldNumber = 2;
  const ::tubelet_service::observation& obs() const;
  ::tubelet_service::observation* release_obs();
  ::tubelet_service::observation* mutable_obs();
  void set_allocated_obs(::tubelet_service::observation* obs);

  // @@protoc_insertion_point(class_scope:tubelet_service.add_observation2d_request)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::tubelet_service::point2d* pos_;
  ::tubelet_service::observation* obs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tubelet_5fservice_2eproto;
};
// -------------------------------------------------------------------

class get_all_tubelets2d_response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tubelet_service.get_all_tubelets2d_response) */ {
 public:
  get_all_tubelets2d_response();
  virtual ~get_all_tubelets2d_response();

  get_all_tubelets2d_response(const get_all_tubelets2d_response& from);
  get_all_tubelets2d_response(get_all_tubelets2d_response&& from) noexcept
    : get_all_tubelets2d_response() {
    *this = ::std::move(from);
  }

  inline get_all_tubelets2d_response& operator=(const get_all_tubelets2d_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_all_tubelets2d_response& operator=(get_all_tubelets2d_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_all_tubelets2d_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const get_all_tubelets2d_response* internal_default_instance() {
    return reinterpret_cast<const get_all_tubelets2d_response*>(
               &_get_all_tubelets2d_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(get_all_tubelets2d_response* other);
  friend void swap(get_all_tubelets2d_response& a, get_all_tubelets2d_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline get_all_tubelets2d_response* New() const final {
    return CreateMaybeMessage<get_all_tubelets2d_response>(nullptr);
  }

  get_all_tubelets2d_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_all_tubelets2d_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_all_tubelets2d_response& from);
  void MergeFrom(const get_all_tubelets2d_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_all_tubelets2d_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tubelet_service.get_all_tubelets2d_response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tubelet_5fservice_2eproto);
    return ::descriptor_table_tubelet_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tubelet_service.tubelet2d tubelets = 1;
  int tubelets_size() const;
  void clear_tubelets();
  static const int kTubeletsFieldNumber = 1;
  ::tubelet_service::tubelet2d* mutable_tubelets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tubelet_service::tubelet2d >*
      mutable_tubelets();
  const ::tubelet_service::tubelet2d& tubelets(int index) const;
  ::tubelet_service::tubelet2d* add_tubelets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tubelet_service::tubelet2d >&
      tubelets() const;

  // @@protoc_insertion_point(class_scope:tubelet_service.get_all_tubelets2d_response)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tubelet_service::tubelet2d > tubelets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tubelet_5fservice_2eproto;
};
// -------------------------------------------------------------------

class move_window_request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tubelet_service.move_window_request) */ {
 public:
  move_window_request();
  virtual ~move_window_request();

  move_window_request(const move_window_request& from);
  move_window_request(move_window_request&& from) noexcept
    : move_window_request() {
    *this = ::std::move(from);
  }

  inline move_window_request& operator=(const move_window_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline move_window_request& operator=(move_window_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const move_window_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const move_window_request* internal_default_instance() {
    return reinterpret_cast<const move_window_request*>(
               &_move_window_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(move_window_request* other);
  friend void swap(move_window_request& a, move_window_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline move_window_request* New() const final {
    return CreateMaybeMessage<move_window_request>(nullptr);
  }

  move_window_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<move_window_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const move_window_request& from);
  void MergeFrom(const move_window_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(move_window_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tubelet_service.move_window_request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tubelet_5fservice_2eproto);
    return ::descriptor_table_tubelet_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double dx = 1;
  void clear_dx();
  static const int kDxFieldNumber = 1;
  double dx() const;
  void set_dx(double value);

  // double dy = 2;
  void clear_dy();
  static const int kDyFieldNumber = 2;
  double dy() const;
  void set_dy(double value);

  // @@protoc_insertion_point(class_scope:tubelet_service.move_window_request)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double dx_;
  double dy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tubelet_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// point2d

// double x = 1;
inline void point2d::clear_x() {
  x_ = 0;
}
inline double point2d::x() const {
  // @@protoc_insertion_point(field_get:tubelet_service.point2d.x)
  return x_;
}
inline void point2d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:tubelet_service.point2d.x)
}

// double y = 2;
inline void point2d::clear_y() {
  y_ = 0;
}
inline double point2d::y() const {
  // @@protoc_insertion_point(field_get:tubelet_service.point2d.y)
  return y_;
}
inline void point2d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:tubelet_service.point2d.y)
}

// -------------------------------------------------------------------

// observation

// uint32 class_index = 1;
inline void observation::clear_class_index() {
  class_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 observation::class_index() const {
  // @@protoc_insertion_point(field_get:tubelet_service.observation.class_index)
  return class_index_;
}
inline void observation::set_class_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  class_index_ = value;
  // @@protoc_insertion_point(field_set:tubelet_service.observation.class_index)
}

// double prob = 2;
inline void observation::clear_prob() {
  prob_ = 0;
}
inline double observation::prob() const {
  // @@protoc_insertion_point(field_get:tubelet_service.observation.prob)
  return prob_;
}
inline void observation::set_prob(double value) {
  
  prob_ = value;
  // @@protoc_insertion_point(field_set:tubelet_service.observation.prob)
}

// -------------------------------------------------------------------

// tubelet2d

// .tubelet_service.point2d pos = 1;
inline bool tubelet2d::has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline void tubelet2d::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::tubelet_service::point2d& tubelet2d::pos() const {
  const ::tubelet_service::point2d* p = pos_;
  // @@protoc_insertion_point(field_get:tubelet_service.tubelet2d.pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::tubelet_service::point2d*>(
      &::tubelet_service::_point2d_default_instance_);
}
inline ::tubelet_service::point2d* tubelet2d::release_pos() {
  // @@protoc_insertion_point(field_release:tubelet_service.tubelet2d.pos)
  
  ::tubelet_service::point2d* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::tubelet_service::point2d* tubelet2d::mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::tubelet_service::point2d>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tubelet_service.tubelet2d.pos)
  return pos_;
}
inline void tubelet2d::set_allocated_pos(::tubelet_service::point2d* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:tubelet_service.tubelet2d.pos)
}

// repeated .tubelet_service.observation observations = 2;
inline int tubelet2d::observations_size() const {
  return observations_.size();
}
inline void tubelet2d::clear_observations() {
  observations_.Clear();
}
inline ::tubelet_service::observation* tubelet2d::mutable_observations(int index) {
  // @@protoc_insertion_point(field_mutable:tubelet_service.tubelet2d.observations)
  return observations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tubelet_service::observation >*
tubelet2d::mutable_observations() {
  // @@protoc_insertion_point(field_mutable_list:tubelet_service.tubelet2d.observations)
  return &observations_;
}
inline const ::tubelet_service::observation& tubelet2d::observations(int index) const {
  // @@protoc_insertion_point(field_get:tubelet_service.tubelet2d.observations)
  return observations_.Get(index);
}
inline ::tubelet_service::observation* tubelet2d::add_observations() {
  // @@protoc_insertion_point(field_add:tubelet_service.tubelet2d.observations)
  return observations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tubelet_service::observation >&
tubelet2d::observations() const {
  // @@protoc_insertion_point(field_list:tubelet_service.tubelet2d.observations)
  return observations_;
}

// -------------------------------------------------------------------

// get_version_response

// string version = 1;
inline void get_version_response::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& get_version_response::version() const {
  // @@protoc_insertion_point(field_get:tubelet_service.get_version_response.version)
  return version_.GetNoArena();
}
inline void get_version_response::set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tubelet_service.get_version_response.version)
}
inline void get_version_response::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tubelet_service.get_version_response.version)
}
inline void get_version_response::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tubelet_service.get_version_response.version)
}
inline void get_version_response::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tubelet_service.get_version_response.version)
}
inline std::string* get_version_response::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:tubelet_service.get_version_response.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* get_version_response::release_version() {
  // @@protoc_insertion_point(field_release:tubelet_service.get_version_response.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void get_version_response::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:tubelet_service.get_version_response.version)
}

// -------------------------------------------------------------------

// add_observation2d_request

// .tubelet_service.point2d pos = 1;
inline bool add_observation2d_request::has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline void add_observation2d_request::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::tubelet_service::point2d& add_observation2d_request::pos() const {
  const ::tubelet_service::point2d* p = pos_;
  // @@protoc_insertion_point(field_get:tubelet_service.add_observation2d_request.pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::tubelet_service::point2d*>(
      &::tubelet_service::_point2d_default_instance_);
}
inline ::tubelet_service::point2d* add_observation2d_request::release_pos() {
  // @@protoc_insertion_point(field_release:tubelet_service.add_observation2d_request.pos)
  
  ::tubelet_service::point2d* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::tubelet_service::point2d* add_observation2d_request::mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::tubelet_service::point2d>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tubelet_service.add_observation2d_request.pos)
  return pos_;
}
inline void add_observation2d_request::set_allocated_pos(::tubelet_service::point2d* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:tubelet_service.add_observation2d_request.pos)
}

// .tubelet_service.observation obs = 2;
inline bool add_observation2d_request::has_obs() const {
  return this != internal_default_instance() && obs_ != nullptr;
}
inline void add_observation2d_request::clear_obs() {
  if (GetArenaNoVirtual() == nullptr && obs_ != nullptr) {
    delete obs_;
  }
  obs_ = nullptr;
}
inline const ::tubelet_service::observation& add_observation2d_request::obs() const {
  const ::tubelet_service::observation* p = obs_;
  // @@protoc_insertion_point(field_get:tubelet_service.add_observation2d_request.obs)
  return p != nullptr ? *p : *reinterpret_cast<const ::tubelet_service::observation*>(
      &::tubelet_service::_observation_default_instance_);
}
inline ::tubelet_service::observation* add_observation2d_request::release_obs() {
  // @@protoc_insertion_point(field_release:tubelet_service.add_observation2d_request.obs)
  
  ::tubelet_service::observation* temp = obs_;
  obs_ = nullptr;
  return temp;
}
inline ::tubelet_service::observation* add_observation2d_request::mutable_obs() {
  
  if (obs_ == nullptr) {
    auto* p = CreateMaybeMessage<::tubelet_service::observation>(GetArenaNoVirtual());
    obs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tubelet_service.add_observation2d_request.obs)
  return obs_;
}
inline void add_observation2d_request::set_allocated_obs(::tubelet_service::observation* obs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obs_;
  }
  if (obs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obs, submessage_arena);
    }
    
  } else {
    
  }
  obs_ = obs;
  // @@protoc_insertion_point(field_set_allocated:tubelet_service.add_observation2d_request.obs)
}

// -------------------------------------------------------------------

// get_all_tubelets2d_response

// repeated .tubelet_service.tubelet2d tubelets = 1;
inline int get_all_tubelets2d_response::tubelets_size() const {
  return tubelets_.size();
}
inline void get_all_tubelets2d_response::clear_tubelets() {
  tubelets_.Clear();
}
inline ::tubelet_service::tubelet2d* get_all_tubelets2d_response::mutable_tubelets(int index) {
  // @@protoc_insertion_point(field_mutable:tubelet_service.get_all_tubelets2d_response.tubelets)
  return tubelets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tubelet_service::tubelet2d >*
get_all_tubelets2d_response::mutable_tubelets() {
  // @@protoc_insertion_point(field_mutable_list:tubelet_service.get_all_tubelets2d_response.tubelets)
  return &tubelets_;
}
inline const ::tubelet_service::tubelet2d& get_all_tubelets2d_response::tubelets(int index) const {
  // @@protoc_insertion_point(field_get:tubelet_service.get_all_tubelets2d_response.tubelets)
  return tubelets_.Get(index);
}
inline ::tubelet_service::tubelet2d* get_all_tubelets2d_response::add_tubelets() {
  // @@protoc_insertion_point(field_add:tubelet_service.get_all_tubelets2d_response.tubelets)
  return tubelets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tubelet_service::tubelet2d >&
get_all_tubelets2d_response::tubelets() const {
  // @@protoc_insertion_point(field_list:tubelet_service.get_all_tubelets2d_response.tubelets)
  return tubelets_;
}

// -------------------------------------------------------------------

// move_window_request

// double dx = 1;
inline void move_window_request::clear_dx() {
  dx_ = 0;
}
inline double move_window_request::dx() const {
  // @@protoc_insertion_point(field_get:tubelet_service.move_window_request.dx)
  return dx_;
}
inline void move_window_request::set_dx(double value) {
  
  dx_ = value;
  // @@protoc_insertion_point(field_set:tubelet_service.move_window_request.dx)
}

// double dy = 2;
inline void move_window_request::clear_dy() {
  dy_ = 0;
}
inline double move_window_request::dy() const {
  // @@protoc_insertion_point(field_get:tubelet_service.move_window_request.dy)
  return dy_;
}
inline void move_window_request::set_dy(double value) {
  
  dy_ = value;
  // @@protoc_insertion_point(field_set:tubelet_service.move_window_request.dy)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tubelet_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tubelet_5fservice_2eproto
