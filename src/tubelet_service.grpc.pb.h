// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tubelet_service.proto
#ifndef GRPC_tubelet_5fservice_2eproto__INCLUDED
#define GRPC_tubelet_5fservice_2eproto__INCLUDED

#include "tubelet_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace tubelet_service {

class tubelet_service final {
 public:
  static constexpr char const* service_full_name() {
    return "tubelet_service.tubelet_service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status get_version(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::tubelet_service::get_version_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::get_version_response>> Asyncget_version(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::get_version_response>>(Asyncget_versionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::get_version_response>> PrepareAsyncget_version(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::get_version_response>>(PrepareAsyncget_versionRaw(context, request, cq));
    }
    virtual ::grpc::Status add_observation2d(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request& request, ::tubelet_service::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>> Asyncadd_observation2d(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>>(Asyncadd_observation2dRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>> PrepareAsyncadd_observation2d(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>>(PrepareAsyncadd_observation2dRaw(context, request, cq));
    }
    virtual ::grpc::Status get_all_tubelets2d(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::tubelet_service::get_all_tubelets2d_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::get_all_tubelets2d_response>> Asyncget_all_tubelets2d(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::get_all_tubelets2d_response>>(Asyncget_all_tubelets2dRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::get_all_tubelets2d_response>> PrepareAsyncget_all_tubelets2d(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::get_all_tubelets2d_response>>(PrepareAsyncget_all_tubelets2dRaw(context, request, cq));
    }
    virtual ::grpc::Status clear(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::tubelet_service::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>> Asyncclear(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>>(AsyncclearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>> PrepareAsyncclear(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>>(PrepareAsyncclearRaw(context, request, cq));
    }
    virtual ::grpc::Status move_window(::grpc::ClientContext* context, const ::tubelet_service::move_window_request& request, ::tubelet_service::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>> Asyncmove_window(::grpc::ClientContext* context, const ::tubelet_service::move_window_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>>(Asyncmove_windowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>> PrepareAsyncmove_window(::grpc::ClientContext* context, const ::tubelet_service::move_window_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>>(PrepareAsyncmove_windowRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void get_version(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::get_version_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_version(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void get_version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::get_version_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void add_observation2d(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void add_observation2d(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void add_observation2d(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void add_observation2d(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void get_all_tubelets2d(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_all_tubelets2d(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::get_all_tubelets2d_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_all_tubelets2d(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void get_all_tubelets2d(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::get_all_tubelets2d_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void clear(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void clear(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void clear(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void clear(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void move_window(::grpc::ClientContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void move_window(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void move_window(::grpc::ClientContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void move_window(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::get_version_response>* Asyncget_versionRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::get_version_response>* PrepareAsyncget_versionRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>* Asyncadd_observation2dRaw(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>* PrepareAsyncadd_observation2dRaw(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::get_all_tubelets2d_response>* Asyncget_all_tubelets2dRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::get_all_tubelets2d_response>* PrepareAsyncget_all_tubelets2dRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>* AsyncclearRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>* PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>* Asyncmove_windowRaw(::grpc::ClientContext* context, const ::tubelet_service::move_window_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tubelet_service::Empty>* PrepareAsyncmove_windowRaw(::grpc::ClientContext* context, const ::tubelet_service::move_window_request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status get_version(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::tubelet_service::get_version_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::get_version_response>> Asyncget_version(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::get_version_response>>(Asyncget_versionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::get_version_response>> PrepareAsyncget_version(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::get_version_response>>(PrepareAsyncget_versionRaw(context, request, cq));
    }
    ::grpc::Status add_observation2d(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request& request, ::tubelet_service::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>> Asyncadd_observation2d(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>>(Asyncadd_observation2dRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>> PrepareAsyncadd_observation2d(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>>(PrepareAsyncadd_observation2dRaw(context, request, cq));
    }
    ::grpc::Status get_all_tubelets2d(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::tubelet_service::get_all_tubelets2d_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::get_all_tubelets2d_response>> Asyncget_all_tubelets2d(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::get_all_tubelets2d_response>>(Asyncget_all_tubelets2dRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::get_all_tubelets2d_response>> PrepareAsyncget_all_tubelets2d(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::get_all_tubelets2d_response>>(PrepareAsyncget_all_tubelets2dRaw(context, request, cq));
    }
    ::grpc::Status clear(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::tubelet_service::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>> Asyncclear(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>>(AsyncclearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>> PrepareAsyncclear(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>>(PrepareAsyncclearRaw(context, request, cq));
    }
    ::grpc::Status move_window(::grpc::ClientContext* context, const ::tubelet_service::move_window_request& request, ::tubelet_service::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>> Asyncmove_window(::grpc::ClientContext* context, const ::tubelet_service::move_window_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>>(Asyncmove_windowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>> PrepareAsyncmove_window(::grpc::ClientContext* context, const ::tubelet_service::move_window_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>>(PrepareAsyncmove_windowRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void get_version(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response, std::function<void(::grpc::Status)>) override;
      void get_version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::get_version_response* response, std::function<void(::grpc::Status)>) override;
      void get_version(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void get_version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::get_version_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void add_observation2d(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)>) override;
      void add_observation2d(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)>) override;
      void add_observation2d(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void add_observation2d(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void get_all_tubelets2d(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response, std::function<void(::grpc::Status)>) override;
      void get_all_tubelets2d(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::get_all_tubelets2d_response* response, std::function<void(::grpc::Status)>) override;
      void get_all_tubelets2d(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void get_all_tubelets2d(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::get_all_tubelets2d_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void clear(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)>) override;
      void clear(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)>) override;
      void clear(::grpc::ClientContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void clear(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void move_window(::grpc::ClientContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)>) override;
      void move_window(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, std::function<void(::grpc::Status)>) override;
      void move_window(::grpc::ClientContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void move_window(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tubelet_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tubelet_service::get_version_response>* Asyncget_versionRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tubelet_service::get_version_response>* PrepareAsyncget_versionRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* Asyncadd_observation2dRaw(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* PrepareAsyncadd_observation2dRaw(::grpc::ClientContext* context, const ::tubelet_service::add_observation2d_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tubelet_service::get_all_tubelets2d_response>* Asyncget_all_tubelets2dRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tubelet_service::get_all_tubelets2d_response>* PrepareAsyncget_all_tubelets2dRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* AsyncclearRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::tubelet_service::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* Asyncmove_windowRaw(::grpc::ClientContext* context, const ::tubelet_service::move_window_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tubelet_service::Empty>* PrepareAsyncmove_windowRaw(::grpc::ClientContext* context, const ::tubelet_service::move_window_request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_get_version_;
    const ::grpc::internal::RpcMethod rpcmethod_add_observation2d_;
    const ::grpc::internal::RpcMethod rpcmethod_get_all_tubelets2d_;
    const ::grpc::internal::RpcMethod rpcmethod_clear_;
    const ::grpc::internal::RpcMethod rpcmethod_move_window_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status get_version(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response);
    virtual ::grpc::Status add_observation2d(::grpc::ServerContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response);
    virtual ::grpc::Status get_all_tubelets2d(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response);
    virtual ::grpc::Status clear(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response);
    virtual ::grpc::Status move_window(::grpc::ServerContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_get_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_get_version() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_get_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_version(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_version(::grpc::ServerContext* context, ::tubelet_service::Empty* request, ::grpc::ServerAsyncResponseWriter< ::tubelet_service::get_version_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_add_observation2d : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_add_observation2d() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_add_observation2d() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_observation2d(::grpc::ServerContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_observation2d(::grpc::ServerContext* context, ::tubelet_service::add_observation2d_request* request, ::grpc::ServerAsyncResponseWriter< ::tubelet_service::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_all_tubelets2d : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_get_all_tubelets2d() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_get_all_tubelets2d() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_all_tubelets2d(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_all_tubelets2d(::grpc::ServerContext* context, ::tubelet_service::Empty* request, ::grpc::ServerAsyncResponseWriter< ::tubelet_service::get_all_tubelets2d_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_clear() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclear(::grpc::ServerContext* context, ::tubelet_service::Empty* request, ::grpc::ServerAsyncResponseWriter< ::tubelet_service::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_move_window : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_move_window() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_move_window() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move_window(::grpc::ServerContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmove_window(::grpc::ServerContext* context, ::tubelet_service::move_window_request* request, ::grpc::ServerAsyncResponseWriter< ::tubelet_service::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_get_version<WithAsyncMethod_add_observation2d<WithAsyncMethod_get_all_tubelets2d<WithAsyncMethod_clear<WithAsyncMethod_move_window<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_get_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_get_version() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::tubelet_service::Empty, ::tubelet_service::get_version_response>(
          [this](::grpc::ServerContext* context,
                 const ::tubelet_service::Empty* request,
                 ::tubelet_service::get_version_response* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->get_version(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_get_version(
        ::grpc::experimental::MessageAllocator< ::tubelet_service::Empty, ::tubelet_service::get_version_response>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tubelet_service::Empty, ::tubelet_service::get_version_response>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_get_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_version(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void get_version(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_add_observation2d : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_add_observation2d() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::tubelet_service::add_observation2d_request, ::tubelet_service::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::tubelet_service::add_observation2d_request* request,
                 ::tubelet_service::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->add_observation2d(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_add_observation2d(
        ::grpc::experimental::MessageAllocator< ::tubelet_service::add_observation2d_request, ::tubelet_service::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tubelet_service::add_observation2d_request, ::tubelet_service::Empty>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_add_observation2d() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_observation2d(::grpc::ServerContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void add_observation2d(::grpc::ServerContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_get_all_tubelets2d : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_get_all_tubelets2d() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::tubelet_service::Empty, ::tubelet_service::get_all_tubelets2d_response>(
          [this](::grpc::ServerContext* context,
                 const ::tubelet_service::Empty* request,
                 ::tubelet_service::get_all_tubelets2d_response* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->get_all_tubelets2d(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_get_all_tubelets2d(
        ::grpc::experimental::MessageAllocator< ::tubelet_service::Empty, ::tubelet_service::get_all_tubelets2d_response>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tubelet_service::Empty, ::tubelet_service::get_all_tubelets2d_response>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_get_all_tubelets2d() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_all_tubelets2d(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void get_all_tubelets2d(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_clear() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::tubelet_service::Empty, ::tubelet_service::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::tubelet_service::Empty* request,
                 ::tubelet_service::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->clear(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_clear(
        ::grpc::experimental::MessageAllocator< ::tubelet_service::Empty, ::tubelet_service::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tubelet_service::Empty, ::tubelet_service::Empty>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void clear(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_move_window : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_move_window() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::tubelet_service::move_window_request, ::tubelet_service::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::tubelet_service::move_window_request* request,
                 ::tubelet_service::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->move_window(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_move_window(
        ::grpc::experimental::MessageAllocator< ::tubelet_service::move_window_request, ::tubelet_service::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tubelet_service::move_window_request, ::tubelet_service::Empty>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_move_window() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move_window(::grpc::ServerContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void move_window(::grpc::ServerContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_get_version<ExperimentalWithCallbackMethod_add_observation2d<ExperimentalWithCallbackMethod_get_all_tubelets2d<ExperimentalWithCallbackMethod_clear<ExperimentalWithCallbackMethod_move_window<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_get_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_get_version() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_get_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_version(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_add_observation2d : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_add_observation2d() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_add_observation2d() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_observation2d(::grpc::ServerContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_all_tubelets2d : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_get_all_tubelets2d() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_get_all_tubelets2d() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_all_tubelets2d(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_clear() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_move_window : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_move_window() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_move_window() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move_window(::grpc::ServerContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_get_version() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_get_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_version(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_version(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_add_observation2d : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_add_observation2d() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_add_observation2d() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_observation2d(::grpc::ServerContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_observation2d(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_all_tubelets2d : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_get_all_tubelets2d() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_get_all_tubelets2d() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_all_tubelets2d(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_all_tubelets2d(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_clear() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclear(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_move_window : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_move_window() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_move_window() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move_window(::grpc::ServerContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmove_window(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_get_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_get_version() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->get_version(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_get_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_version(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void get_version(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_add_observation2d : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_add_observation2d() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->add_observation2d(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_add_observation2d() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_observation2d(::grpc::ServerContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void add_observation2d(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_get_all_tubelets2d : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_get_all_tubelets2d() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->get_all_tubelets2d(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_get_all_tubelets2d() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_all_tubelets2d(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void get_all_tubelets2d(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_clear() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->clear(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void clear(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_move_window : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_move_window() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->move_window(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_move_window() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move_window(::grpc::ServerContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void move_window(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_get_version() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::tubelet_service::Empty, ::tubelet_service::get_version_response>(std::bind(&WithStreamedUnaryMethod_get_version<BaseClass>::Streamedget_version, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_get_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_version(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_version_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_version(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tubelet_service::Empty,::tubelet_service::get_version_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_add_observation2d : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_add_observation2d() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::tubelet_service::add_observation2d_request, ::tubelet_service::Empty>(std::bind(&WithStreamedUnaryMethod_add_observation2d<BaseClass>::Streamedadd_observation2d, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_add_observation2d() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status add_observation2d(::grpc::ServerContext* context, const ::tubelet_service::add_observation2d_request* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedadd_observation2d(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tubelet_service::add_observation2d_request,::tubelet_service::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_all_tubelets2d : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_get_all_tubelets2d() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::tubelet_service::Empty, ::tubelet_service::get_all_tubelets2d_response>(std::bind(&WithStreamedUnaryMethod_get_all_tubelets2d<BaseClass>::Streamedget_all_tubelets2d, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_get_all_tubelets2d() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_all_tubelets2d(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::get_all_tubelets2d_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_all_tubelets2d(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tubelet_service::Empty,::tubelet_service::get_all_tubelets2d_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_clear() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::tubelet_service::Empty, ::tubelet_service::Empty>(std::bind(&WithStreamedUnaryMethod_clear<BaseClass>::Streamedclear, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status clear(::grpc::ServerContext* context, const ::tubelet_service::Empty* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclear(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tubelet_service::Empty,::tubelet_service::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_move_window : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_move_window() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::tubelet_service::move_window_request, ::tubelet_service::Empty>(std::bind(&WithStreamedUnaryMethod_move_window<BaseClass>::Streamedmove_window, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_move_window() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status move_window(::grpc::ServerContext* context, const ::tubelet_service::move_window_request* request, ::tubelet_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedmove_window(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tubelet_service::move_window_request,::tubelet_service::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_get_version<WithStreamedUnaryMethod_add_observation2d<WithStreamedUnaryMethod_get_all_tubelets2d<WithStreamedUnaryMethod_clear<WithStreamedUnaryMethod_move_window<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_get_version<WithStreamedUnaryMethod_add_observation2d<WithStreamedUnaryMethod_get_all_tubelets2d<WithStreamedUnaryMethod_clear<WithStreamedUnaryMethod_move_window<Service > > > > > StreamedService;
};

}  // namespace tubelet_service


#endif  // GRPC_tubelet_5fservice_2eproto__INCLUDED
