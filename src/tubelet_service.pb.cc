// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tubelet_service.proto

#include "tubelet_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tubelet_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_observation_tubelet_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tubelet_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_point2d_tubelet_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tubelet_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_tubelet2d_tubelet_5fservice_2eproto;
namespace tubelet_service {
class EmptyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
class point2dDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<point2d> _instance;
} _point2d_default_instance_;
class observationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<observation> _instance;
} _observation_default_instance_;
class tubelet2dDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tubelet2d> _instance;
} _tubelet2d_default_instance_;
class get_version_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_version_response> _instance;
} _get_version_response_default_instance_;
class add_observation2d_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<add_observation2d_request> _instance;
} _add_observation2d_request_default_instance_;
class get_all_tubelets2d_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_all_tubelets2d_response> _instance;
} _get_all_tubelets2d_response_default_instance_;
class move_window_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<move_window_request> _instance;
} _move_window_request_default_instance_;
class set_window_position_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<set_window_position_request> _instance;
} _set_window_position_request_default_instance_;
}  // namespace tubelet_service
static void InitDefaultsscc_info_Empty_tubelet_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tubelet_service::_Empty_default_instance_;
    new (ptr) ::tubelet_service::Empty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tubelet_service::Empty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_tubelet_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Empty_tubelet_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_add_observation2d_request_tubelet_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tubelet_service::_add_observation2d_request_default_instance_;
    new (ptr) ::tubelet_service::add_observation2d_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tubelet_service::add_observation2d_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_add_observation2d_request_tubelet_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_add_observation2d_request_tubelet_5fservice_2eproto}, {
      &scc_info_point2d_tubelet_5fservice_2eproto.base,
      &scc_info_observation_tubelet_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_get_all_tubelets2d_response_tubelet_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tubelet_service::_get_all_tubelets2d_response_default_instance_;
    new (ptr) ::tubelet_service::get_all_tubelets2d_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tubelet_service::get_all_tubelets2d_response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_get_all_tubelets2d_response_tubelet_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_get_all_tubelets2d_response_tubelet_5fservice_2eproto}, {
      &scc_info_tubelet2d_tubelet_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_get_version_response_tubelet_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tubelet_service::_get_version_response_default_instance_;
    new (ptr) ::tubelet_service::get_version_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tubelet_service::get_version_response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_version_response_tubelet_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_get_version_response_tubelet_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_move_window_request_tubelet_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tubelet_service::_move_window_request_default_instance_;
    new (ptr) ::tubelet_service::move_window_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tubelet_service::move_window_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_move_window_request_tubelet_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_move_window_request_tubelet_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_observation_tubelet_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tubelet_service::_observation_default_instance_;
    new (ptr) ::tubelet_service::observation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tubelet_service::observation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_observation_tubelet_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_observation_tubelet_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_point2d_tubelet_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tubelet_service::_point2d_default_instance_;
    new (ptr) ::tubelet_service::point2d();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tubelet_service::point2d::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_point2d_tubelet_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_point2d_tubelet_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_set_window_position_request_tubelet_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tubelet_service::_set_window_position_request_default_instance_;
    new (ptr) ::tubelet_service::set_window_position_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tubelet_service::set_window_position_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_set_window_position_request_tubelet_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_set_window_position_request_tubelet_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_tubelet2d_tubelet_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tubelet_service::_tubelet2d_default_instance_;
    new (ptr) ::tubelet_service::tubelet2d();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tubelet_service::tubelet2d::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_tubelet2d_tubelet_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_tubelet2d_tubelet_5fservice_2eproto}, {
      &scc_info_point2d_tubelet_5fservice_2eproto.base,
      &scc_info_observation_tubelet_5fservice_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tubelet_5fservice_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tubelet_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tubelet_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tubelet_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::point2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::point2d, x_),
  PROTOBUF_FIELD_OFFSET(::tubelet_service::point2d, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::observation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::observation, class_index_),
  PROTOBUF_FIELD_OFFSET(::tubelet_service::observation, prob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::tubelet2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::tubelet2d, pos_),
  PROTOBUF_FIELD_OFFSET(::tubelet_service::tubelet2d, observations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::get_version_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::get_version_response, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::add_observation2d_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::add_observation2d_request, pos_),
  PROTOBUF_FIELD_OFFSET(::tubelet_service::add_observation2d_request, obs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::get_all_tubelets2d_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::get_all_tubelets2d_response, tubelets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::move_window_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::move_window_request, dx_),
  PROTOBUF_FIELD_OFFSET(::tubelet_service::move_window_request, dy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::set_window_position_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tubelet_service::set_window_position_request, x0_),
  PROTOBUF_FIELD_OFFSET(::tubelet_service::set_window_position_request, y0_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tubelet_service::Empty)},
  { 5, -1, sizeof(::tubelet_service::point2d)},
  { 12, -1, sizeof(::tubelet_service::observation)},
  { 19, -1, sizeof(::tubelet_service::tubelet2d)},
  { 26, -1, sizeof(::tubelet_service::get_version_response)},
  { 32, -1, sizeof(::tubelet_service::add_observation2d_request)},
  { 39, -1, sizeof(::tubelet_service::get_all_tubelets2d_response)},
  { 45, -1, sizeof(::tubelet_service::move_window_request)},
  { 52, -1, sizeof(::tubelet_service::set_window_position_request)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tubelet_service::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tubelet_service::_point2d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tubelet_service::_observation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tubelet_service::_tubelet2d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tubelet_service::_get_version_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tubelet_service::_add_observation2d_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tubelet_service::_get_all_tubelets2d_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tubelet_service::_move_window_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tubelet_service::_set_window_position_request_default_instance_),
};

const char descriptor_table_protodef_tubelet_5fservice_2eproto[] =
  "\n\025tubelet_service.proto\022\017tubelet_service"
  "\"\007\n\005Empty\"\037\n\007point2d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001"
  "(\001\"0\n\013observation\022\023\n\013class_index\030\001 \001(\r\022\014"
  "\n\004prob\030\002 \001(\001\"f\n\ttubelet2d\022%\n\003pos\030\001 \001(\0132\030"
  ".tubelet_service.point2d\0222\n\014observations"
  "\030\002 \003(\0132\034.tubelet_service.observation\"\'\n\024"
  "get_version_response\022\017\n\007version\030\001 \001(\t\"m\n"
  "\031add_observation2d_request\022%\n\003pos\030\001 \001(\0132"
  "\030.tubelet_service.point2d\022)\n\003obs\030\002 \001(\0132\034"
  ".tubelet_service.observation\"K\n\033get_all_"
  "tubelets2d_response\022,\n\010tubelets\030\001 \003(\0132\032."
  "tubelet_service.tubelet2d\"-\n\023move_window"
  "_request\022\n\n\002dx\030\001 \001(\001\022\n\n\002dy\030\002 \001(\001\"5\n\033set_"
  "window_position_request\022\n\n\002x0\030\001 \001(\001\022\n\n\002y"
  "0\030\002 \001(\0012\275\004\n\017tubelet_service\022N\n\013get_versi"
  "on\022\026.tubelet_service.Empty\032%.tubelet_ser"
  "vice.get_version_response\"\000\022Y\n\021add_obser"
  "vation2d\022*.tubelet_service.add_observati"
  "on2d_request\032\026.tubelet_service.Empty\"\000\022\\"
  "\n\022get_all_tubelets2d\022\026.tubelet_service.E"
  "mpty\032,.tubelet_service.get_all_tubelets2"
  "d_response\"\000\0229\n\005reset\022\026.tubelet_service."
  "Empty\032\026.tubelet_service.Empty\"\000\0228\n\004clip\022"
  "\026.tubelet_service.Empty\032\026.tubelet_servic"
  "e.Empty\"\000\022M\n\013move_window\022$.tubelet_servi"
  "ce.move_window_request\032\026.tubelet_service"
  ".Empty\"\000\022]\n\023set_window_position\022,.tubele"
  "t_service.set_window_position_request\032\026."
  "tubelet_service.Empty\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tubelet_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tubelet_5fservice_2eproto_sccs[9] = {
  &scc_info_Empty_tubelet_5fservice_2eproto.base,
  &scc_info_add_observation2d_request_tubelet_5fservice_2eproto.base,
  &scc_info_get_all_tubelets2d_response_tubelet_5fservice_2eproto.base,
  &scc_info_get_version_response_tubelet_5fservice_2eproto.base,
  &scc_info_move_window_request_tubelet_5fservice_2eproto.base,
  &scc_info_observation_tubelet_5fservice_2eproto.base,
  &scc_info_point2d_tubelet_5fservice_2eproto.base,
  &scc_info_set_window_position_request_tubelet_5fservice_2eproto.base,
  &scc_info_tubelet2d_tubelet_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tubelet_5fservice_2eproto_once;
static bool descriptor_table_tubelet_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tubelet_5fservice_2eproto = {
  &descriptor_table_tubelet_5fservice_2eproto_initialized, descriptor_table_protodef_tubelet_5fservice_2eproto, "tubelet_service.proto", 1151,
  &descriptor_table_tubelet_5fservice_2eproto_once, descriptor_table_tubelet_5fservice_2eproto_sccs, descriptor_table_tubelet_5fservice_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_tubelet_5fservice_2eproto::offsets,
  file_level_metadata_tubelet_5fservice_2eproto, 9, file_level_enum_descriptors_tubelet_5fservice_2eproto, file_level_service_descriptors_tubelet_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tubelet_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tubelet_5fservice_2eproto), true);
namespace tubelet_service {

// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tubelet_service.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tubelet_service.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:tubelet_service.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Empty_tubelet_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:tubelet_service.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Empty::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tubelet_service.Empty)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tubelet_service.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tubelet_service.Empty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Empty::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tubelet_service.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tubelet_service.Empty)
}

::PROTOBUF_NAMESPACE_ID::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tubelet_service.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tubelet_service.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tubelet_service.Empty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tubelet_service.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tubelet_service.Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tubelet_service.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tubelet_service.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tubelet_service.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tubelet_service.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void point2d::InitAsDefaultInstance() {
}
class point2d::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int point2d::kXFieldNumber;
const int point2d::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

point2d::point2d()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tubelet_service.point2d)
}
point2d::point2d(const point2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:tubelet_service.point2d)
}

void point2d::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

point2d::~point2d() {
  // @@protoc_insertion_point(destructor:tubelet_service.point2d)
  SharedDtor();
}

void point2d::SharedDtor() {
}

void point2d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const point2d& point2d::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_point2d_tubelet_5fservice_2eproto.base);
  return *internal_default_instance();
}


void point2d::Clear() {
// @@protoc_insertion_point(message_clear_start:tubelet_service.point2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* point2d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool point2d::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tubelet_service.point2d)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tubelet_service.point2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tubelet_service.point2d)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void point2d::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tubelet_service.point2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tubelet_service.point2d)
}

::PROTOBUF_NAMESPACE_ID::uint8* point2d::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tubelet_service.point2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tubelet_service.point2d)
  return target;
}

size_t point2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tubelet_service.point2d)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void point2d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tubelet_service.point2d)
  GOOGLE_DCHECK_NE(&from, this);
  const point2d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<point2d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tubelet_service.point2d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tubelet_service.point2d)
    MergeFrom(*source);
  }
}

void point2d::MergeFrom(const point2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tubelet_service.point2d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
}

void point2d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tubelet_service.point2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void point2d::CopyFrom(const point2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tubelet_service.point2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool point2d::IsInitialized() const {
  return true;
}

void point2d::Swap(point2d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void point2d::InternalSwap(point2d* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata point2d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void observation::InitAsDefaultInstance() {
}
class observation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int observation::kClassIndexFieldNumber;
const int observation::kProbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

observation::observation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tubelet_service.observation)
}
observation::observation(const observation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&prob_, &from.prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&class_index_) -
    reinterpret_cast<char*>(&prob_)) + sizeof(class_index_));
  // @@protoc_insertion_point(copy_constructor:tubelet_service.observation)
}

void observation::SharedCtor() {
  ::memset(&prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class_index_) -
      reinterpret_cast<char*>(&prob_)) + sizeof(class_index_));
}

observation::~observation() {
  // @@protoc_insertion_point(destructor:tubelet_service.observation)
  SharedDtor();
}

void observation::SharedDtor() {
}

void observation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const observation& observation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_observation_tubelet_5fservice_2eproto.base);
  return *internal_default_instance();
}


void observation::Clear() {
// @@protoc_insertion_point(message_clear_start:tubelet_service.observation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class_index_) -
      reinterpret_cast<char*>(&prob_)) + sizeof(class_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* observation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 class_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          class_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double prob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool observation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tubelet_service.observation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 class_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double prob = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tubelet_service.observation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tubelet_service.observation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void observation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tubelet_service.observation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 class_index = 1;
  if (this->class_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->class_index(), output);
  }

  // double prob = 2;
  if (!(this->prob() <= 0 && this->prob() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->prob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tubelet_service.observation)
}

::PROTOBUF_NAMESPACE_ID::uint8* observation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tubelet_service.observation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 class_index = 1;
  if (this->class_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->class_index(), target);
  }

  // double prob = 2;
  if (!(this->prob() <= 0 && this->prob() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->prob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tubelet_service.observation)
  return target;
}

size_t observation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tubelet_service.observation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double prob = 2;
  if (!(this->prob() <= 0 && this->prob() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 class_index = 1;
  if (this->class_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->class_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void observation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tubelet_service.observation)
  GOOGLE_DCHECK_NE(&from, this);
  const observation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<observation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tubelet_service.observation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tubelet_service.observation)
    MergeFrom(*source);
  }
}

void observation::MergeFrom(const observation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tubelet_service.observation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.prob() <= 0 && from.prob() >= 0)) {
    set_prob(from.prob());
  }
  if (from.class_index() != 0) {
    set_class_index(from.class_index());
  }
}

void observation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tubelet_service.observation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void observation::CopyFrom(const observation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tubelet_service.observation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool observation::IsInitialized() const {
  return true;
}

void observation::Swap(observation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void observation::InternalSwap(observation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(prob_, other->prob_);
  swap(class_index_, other->class_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata observation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tubelet2d::InitAsDefaultInstance() {
  ::tubelet_service::_tubelet2d_default_instance_._instance.get_mutable()->pos_ = const_cast< ::tubelet_service::point2d*>(
      ::tubelet_service::point2d::internal_default_instance());
}
class tubelet2d::HasBitSetters {
 public:
  static const ::tubelet_service::point2d& pos(const tubelet2d* msg);
};

const ::tubelet_service::point2d&
tubelet2d::HasBitSetters::pos(const tubelet2d* msg) {
  return *msg->pos_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tubelet2d::kPosFieldNumber;
const int tubelet2d::kObservationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tubelet2d::tubelet2d()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tubelet_service.tubelet2d)
}
tubelet2d::tubelet2d(const tubelet2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      observations_(from.observations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::tubelet_service::point2d(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tubelet_service.tubelet2d)
}

void tubelet2d::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tubelet2d_tubelet_5fservice_2eproto.base);
  pos_ = nullptr;
}

tubelet2d::~tubelet2d() {
  // @@protoc_insertion_point(destructor:tubelet_service.tubelet2d)
  SharedDtor();
}

void tubelet2d::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void tubelet2d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tubelet2d& tubelet2d::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tubelet2d_tubelet_5fservice_2eproto.base);
  return *internal_default_instance();
}


void tubelet2d::Clear() {
// @@protoc_insertion_point(message_clear_start:tubelet_service.tubelet2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  observations_.Clear();
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* tubelet2d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tubelet_service.point2d pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tubelet_service.observation observations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_observations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool tubelet2d::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tubelet_service.tubelet2d)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tubelet_service.point2d pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tubelet_service.observation observations = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_observations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tubelet_service.tubelet2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tubelet_service.tubelet2d)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void tubelet2d::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tubelet_service.tubelet2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tubelet_service.point2d pos = 1;
  if (this->has_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pos(this), output);
  }

  // repeated .tubelet_service.observation observations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->observations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->observations(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tubelet_service.tubelet2d)
}

::PROTOBUF_NAMESPACE_ID::uint8* tubelet2d::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tubelet_service.tubelet2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tubelet_service.point2d pos = 1;
  if (this->has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pos(this), target);
  }

  // repeated .tubelet_service.observation observations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->observations_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->observations(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tubelet_service.tubelet2d)
  return target;
}

size_t tubelet2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tubelet_service.tubelet2d)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tubelet_service.observation observations = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->observations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->observations(static_cast<int>(i)));
    }
  }

  // .tubelet_service.point2d pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tubelet2d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tubelet_service.tubelet2d)
  GOOGLE_DCHECK_NE(&from, this);
  const tubelet2d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tubelet2d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tubelet_service.tubelet2d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tubelet_service.tubelet2d)
    MergeFrom(*source);
  }
}

void tubelet2d::MergeFrom(const tubelet2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tubelet_service.tubelet2d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  observations_.MergeFrom(from.observations_);
  if (from.has_pos()) {
    mutable_pos()->::tubelet_service::point2d::MergeFrom(from.pos());
  }
}

void tubelet2d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tubelet_service.tubelet2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tubelet2d::CopyFrom(const tubelet2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tubelet_service.tubelet2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tubelet2d::IsInitialized() const {
  return true;
}

void tubelet2d::Swap(tubelet2d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tubelet2d::InternalSwap(tubelet2d* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&observations_)->InternalSwap(CastToBase(&other->observations_));
  swap(pos_, other->pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tubelet2d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void get_version_response::InitAsDefaultInstance() {
}
class get_version_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_version_response::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_version_response::get_version_response()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tubelet_service.get_version_response)
}
get_version_response::get_version_response(const get_version_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:tubelet_service.get_version_response)
}

void get_version_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_version_response_tubelet_5fservice_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_version_response::~get_version_response() {
  // @@protoc_insertion_point(destructor:tubelet_service.get_version_response)
  SharedDtor();
}

void get_version_response::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_version_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_version_response& get_version_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_version_response_tubelet_5fservice_2eproto.base);
  return *internal_default_instance();
}


void get_version_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tubelet_service.get_version_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* get_version_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_version(), ptr, ctx, "tubelet_service.get_version_response.version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool get_version_response::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tubelet_service.get_version_response)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tubelet_service.get_version_response.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tubelet_service.get_version_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tubelet_service.get_version_response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void get_version_response::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tubelet_service.get_version_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tubelet_service.get_version_response.version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tubelet_service.get_version_response)
}

::PROTOBUF_NAMESPACE_ID::uint8* get_version_response::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tubelet_service.get_version_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tubelet_service.get_version_response.version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tubelet_service.get_version_response)
  return target;
}

size_t get_version_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tubelet_service.get_version_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_version_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tubelet_service.get_version_response)
  GOOGLE_DCHECK_NE(&from, this);
  const get_version_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_version_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tubelet_service.get_version_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tubelet_service.get_version_response)
    MergeFrom(*source);
  }
}

void get_version_response::MergeFrom(const get_version_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tubelet_service.get_version_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void get_version_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tubelet_service.get_version_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_version_response::CopyFrom(const get_version_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tubelet_service.get_version_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_version_response::IsInitialized() const {
  return true;
}

void get_version_response::Swap(get_version_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_version_response::InternalSwap(get_version_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata get_version_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void add_observation2d_request::InitAsDefaultInstance() {
  ::tubelet_service::_add_observation2d_request_default_instance_._instance.get_mutable()->pos_ = const_cast< ::tubelet_service::point2d*>(
      ::tubelet_service::point2d::internal_default_instance());
  ::tubelet_service::_add_observation2d_request_default_instance_._instance.get_mutable()->obs_ = const_cast< ::tubelet_service::observation*>(
      ::tubelet_service::observation::internal_default_instance());
}
class add_observation2d_request::HasBitSetters {
 public:
  static const ::tubelet_service::point2d& pos(const add_observation2d_request* msg);
  static const ::tubelet_service::observation& obs(const add_observation2d_request* msg);
};

const ::tubelet_service::point2d&
add_observation2d_request::HasBitSetters::pos(const add_observation2d_request* msg) {
  return *msg->pos_;
}
const ::tubelet_service::observation&
add_observation2d_request::HasBitSetters::obs(const add_observation2d_request* msg) {
  return *msg->obs_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int add_observation2d_request::kPosFieldNumber;
const int add_observation2d_request::kObsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

add_observation2d_request::add_observation2d_request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tubelet_service.add_observation2d_request)
}
add_observation2d_request::add_observation2d_request(const add_observation2d_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::tubelet_service::point2d(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from.has_obs()) {
    obs_ = new ::tubelet_service::observation(*from.obs_);
  } else {
    obs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tubelet_service.add_observation2d_request)
}

void add_observation2d_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_add_observation2d_request_tubelet_5fservice_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obs_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(obs_));
}

add_observation2d_request::~add_observation2d_request() {
  // @@protoc_insertion_point(destructor:tubelet_service.add_observation2d_request)
  SharedDtor();
}

void add_observation2d_request::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete obs_;
}

void add_observation2d_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const add_observation2d_request& add_observation2d_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_add_observation2d_request_tubelet_5fservice_2eproto.base);
  return *internal_default_instance();
}


void add_observation2d_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tubelet_service.add_observation2d_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && obs_ != nullptr) {
    delete obs_;
  }
  obs_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* add_observation2d_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tubelet_service.point2d pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tubelet_service.observation obs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_obs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool add_observation2d_request::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tubelet_service.add_observation2d_request)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tubelet_service.point2d pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tubelet_service.observation obs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_obs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tubelet_service.add_observation2d_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tubelet_service.add_observation2d_request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void add_observation2d_request::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tubelet_service.add_observation2d_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tubelet_service.point2d pos = 1;
  if (this->has_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pos(this), output);
  }

  // .tubelet_service.observation obs = 2;
  if (this->has_obs()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::obs(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tubelet_service.add_observation2d_request)
}

::PROTOBUF_NAMESPACE_ID::uint8* add_observation2d_request::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tubelet_service.add_observation2d_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tubelet_service.point2d pos = 1;
  if (this->has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pos(this), target);
  }

  // .tubelet_service.observation obs = 2;
  if (this->has_obs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::obs(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tubelet_service.add_observation2d_request)
  return target;
}

size_t add_observation2d_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tubelet_service.add_observation2d_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tubelet_service.point2d pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .tubelet_service.observation obs = 2;
  if (this->has_obs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obs_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void add_observation2d_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tubelet_service.add_observation2d_request)
  GOOGLE_DCHECK_NE(&from, this);
  const add_observation2d_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<add_observation2d_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tubelet_service.add_observation2d_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tubelet_service.add_observation2d_request)
    MergeFrom(*source);
  }
}

void add_observation2d_request::MergeFrom(const add_observation2d_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tubelet_service.add_observation2d_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    mutable_pos()->::tubelet_service::point2d::MergeFrom(from.pos());
  }
  if (from.has_obs()) {
    mutable_obs()->::tubelet_service::observation::MergeFrom(from.obs());
  }
}

void add_observation2d_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tubelet_service.add_observation2d_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_observation2d_request::CopyFrom(const add_observation2d_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tubelet_service.add_observation2d_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_observation2d_request::IsInitialized() const {
  return true;
}

void add_observation2d_request::Swap(add_observation2d_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void add_observation2d_request::InternalSwap(add_observation2d_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(obs_, other->obs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata add_observation2d_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void get_all_tubelets2d_response::InitAsDefaultInstance() {
}
class get_all_tubelets2d_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_all_tubelets2d_response::kTubeletsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_all_tubelets2d_response::get_all_tubelets2d_response()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tubelet_service.get_all_tubelets2d_response)
}
get_all_tubelets2d_response::get_all_tubelets2d_response(const get_all_tubelets2d_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tubelets_(from.tubelets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tubelet_service.get_all_tubelets2d_response)
}

void get_all_tubelets2d_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_all_tubelets2d_response_tubelet_5fservice_2eproto.base);
}

get_all_tubelets2d_response::~get_all_tubelets2d_response() {
  // @@protoc_insertion_point(destructor:tubelet_service.get_all_tubelets2d_response)
  SharedDtor();
}

void get_all_tubelets2d_response::SharedDtor() {
}

void get_all_tubelets2d_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_all_tubelets2d_response& get_all_tubelets2d_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_all_tubelets2d_response_tubelet_5fservice_2eproto.base);
  return *internal_default_instance();
}


void get_all_tubelets2d_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tubelet_service.get_all_tubelets2d_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tubelets_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* get_all_tubelets2d_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tubelet_service.tubelet2d tubelets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tubelets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool get_all_tubelets2d_response::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tubelet_service.get_all_tubelets2d_response)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tubelet_service.tubelet2d tubelets = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tubelets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tubelet_service.get_all_tubelets2d_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tubelet_service.get_all_tubelets2d_response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void get_all_tubelets2d_response::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tubelet_service.get_all_tubelets2d_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tubelet_service.tubelet2d tubelets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tubelets_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tubelets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tubelet_service.get_all_tubelets2d_response)
}

::PROTOBUF_NAMESPACE_ID::uint8* get_all_tubelets2d_response::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tubelet_service.get_all_tubelets2d_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tubelet_service.tubelet2d tubelets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tubelets_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tubelets(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tubelet_service.get_all_tubelets2d_response)
  return target;
}

size_t get_all_tubelets2d_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tubelet_service.get_all_tubelets2d_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tubelet_service.tubelet2d tubelets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tubelets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tubelets(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_all_tubelets2d_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tubelet_service.get_all_tubelets2d_response)
  GOOGLE_DCHECK_NE(&from, this);
  const get_all_tubelets2d_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_all_tubelets2d_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tubelet_service.get_all_tubelets2d_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tubelet_service.get_all_tubelets2d_response)
    MergeFrom(*source);
  }
}

void get_all_tubelets2d_response::MergeFrom(const get_all_tubelets2d_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tubelet_service.get_all_tubelets2d_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tubelets_.MergeFrom(from.tubelets_);
}

void get_all_tubelets2d_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tubelet_service.get_all_tubelets2d_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_all_tubelets2d_response::CopyFrom(const get_all_tubelets2d_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tubelet_service.get_all_tubelets2d_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_all_tubelets2d_response::IsInitialized() const {
  return true;
}

void get_all_tubelets2d_response::Swap(get_all_tubelets2d_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_all_tubelets2d_response::InternalSwap(get_all_tubelets2d_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tubelets_)->InternalSwap(CastToBase(&other->tubelets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata get_all_tubelets2d_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void move_window_request::InitAsDefaultInstance() {
}
class move_window_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int move_window_request::kDxFieldNumber;
const int move_window_request::kDyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

move_window_request::move_window_request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tubelet_service.move_window_request)
}
move_window_request::move_window_request(const move_window_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dx_, &from.dx_,
    static_cast<size_t>(reinterpret_cast<char*>(&dy_) -
    reinterpret_cast<char*>(&dx_)) + sizeof(dy_));
  // @@protoc_insertion_point(copy_constructor:tubelet_service.move_window_request)
}

void move_window_request::SharedCtor() {
  ::memset(&dx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dy_) -
      reinterpret_cast<char*>(&dx_)) + sizeof(dy_));
}

move_window_request::~move_window_request() {
  // @@protoc_insertion_point(destructor:tubelet_service.move_window_request)
  SharedDtor();
}

void move_window_request::SharedDtor() {
}

void move_window_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const move_window_request& move_window_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_move_window_request_tubelet_5fservice_2eproto.base);
  return *internal_default_instance();
}


void move_window_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tubelet_service.move_window_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dy_) -
      reinterpret_cast<char*>(&dx_)) + sizeof(dy_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* move_window_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool move_window_request::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tubelet_service.move_window_request)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double dx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dy = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tubelet_service.move_window_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tubelet_service.move_window_request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void move_window_request::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tubelet_service.move_window_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dx = 1;
  if (!(this->dx() <= 0 && this->dx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->dx(), output);
  }

  // double dy = 2;
  if (!(this->dy() <= 0 && this->dy() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->dy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tubelet_service.move_window_request)
}

::PROTOBUF_NAMESPACE_ID::uint8* move_window_request::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tubelet_service.move_window_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dx = 1;
  if (!(this->dx() <= 0 && this->dx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->dx(), target);
  }

  // double dy = 2;
  if (!(this->dy() <= 0 && this->dy() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->dy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tubelet_service.move_window_request)
  return target;
}

size_t move_window_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tubelet_service.move_window_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dx = 1;
  if (!(this->dx() <= 0 && this->dx() >= 0)) {
    total_size += 1 + 8;
  }

  // double dy = 2;
  if (!(this->dy() <= 0 && this->dy() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void move_window_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tubelet_service.move_window_request)
  GOOGLE_DCHECK_NE(&from, this);
  const move_window_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<move_window_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tubelet_service.move_window_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tubelet_service.move_window_request)
    MergeFrom(*source);
  }
}

void move_window_request::MergeFrom(const move_window_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tubelet_service.move_window_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dx() <= 0 && from.dx() >= 0)) {
    set_dx(from.dx());
  }
  if (!(from.dy() <= 0 && from.dy() >= 0)) {
    set_dy(from.dy());
  }
}

void move_window_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tubelet_service.move_window_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void move_window_request::CopyFrom(const move_window_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tubelet_service.move_window_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool move_window_request::IsInitialized() const {
  return true;
}

void move_window_request::Swap(move_window_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void move_window_request::InternalSwap(move_window_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dx_, other->dx_);
  swap(dy_, other->dy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata move_window_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void set_window_position_request::InitAsDefaultInstance() {
}
class set_window_position_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int set_window_position_request::kX0FieldNumber;
const int set_window_position_request::kY0FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

set_window_position_request::set_window_position_request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tubelet_service.set_window_position_request)
}
set_window_position_request::set_window_position_request(const set_window_position_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x0_, &from.x0_,
    static_cast<size_t>(reinterpret_cast<char*>(&y0_) -
    reinterpret_cast<char*>(&x0_)) + sizeof(y0_));
  // @@protoc_insertion_point(copy_constructor:tubelet_service.set_window_position_request)
}

void set_window_position_request::SharedCtor() {
  ::memset(&x0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y0_) -
      reinterpret_cast<char*>(&x0_)) + sizeof(y0_));
}

set_window_position_request::~set_window_position_request() {
  // @@protoc_insertion_point(destructor:tubelet_service.set_window_position_request)
  SharedDtor();
}

void set_window_position_request::SharedDtor() {
}

void set_window_position_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const set_window_position_request& set_window_position_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_set_window_position_request_tubelet_5fservice_2eproto.base);
  return *internal_default_instance();
}


void set_window_position_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tubelet_service.set_window_position_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y0_) -
      reinterpret_cast<char*>(&x0_)) + sizeof(y0_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* set_window_position_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool set_window_position_request::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tubelet_service.set_window_position_request)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x0 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y0 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tubelet_service.set_window_position_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tubelet_service.set_window_position_request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void set_window_position_request::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tubelet_service.set_window_position_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x0 = 1;
  if (!(this->x0() <= 0 && this->x0() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x0(), output);
  }

  // double y0 = 2;
  if (!(this->y0() <= 0 && this->y0() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y0(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tubelet_service.set_window_position_request)
}

::PROTOBUF_NAMESPACE_ID::uint8* set_window_position_request::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tubelet_service.set_window_position_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x0 = 1;
  if (!(this->x0() <= 0 && this->x0() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x0(), target);
  }

  // double y0 = 2;
  if (!(this->y0() <= 0 && this->y0() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y0(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tubelet_service.set_window_position_request)
  return target;
}

size_t set_window_position_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tubelet_service.set_window_position_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x0 = 1;
  if (!(this->x0() <= 0 && this->x0() >= 0)) {
    total_size += 1 + 8;
  }

  // double y0 = 2;
  if (!(this->y0() <= 0 && this->y0() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void set_window_position_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tubelet_service.set_window_position_request)
  GOOGLE_DCHECK_NE(&from, this);
  const set_window_position_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<set_window_position_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tubelet_service.set_window_position_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tubelet_service.set_window_position_request)
    MergeFrom(*source);
  }
}

void set_window_position_request::MergeFrom(const set_window_position_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tubelet_service.set_window_position_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x0() <= 0 && from.x0() >= 0)) {
    set_x0(from.x0());
  }
  if (!(from.y0() <= 0 && from.y0() >= 0)) {
    set_y0(from.y0());
  }
}

void set_window_position_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tubelet_service.set_window_position_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_window_position_request::CopyFrom(const set_window_position_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tubelet_service.set_window_position_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_window_position_request::IsInitialized() const {
  return true;
}

void set_window_position_request::Swap(set_window_position_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void set_window_position_request::InternalSwap(set_window_position_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x0_, other->x0_);
  swap(y0_, other->y0_);
}

::PROTOBUF_NAMESPACE_ID::Metadata set_window_position_request::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tubelet_service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tubelet_service::Empty* Arena::CreateMaybeMessage< ::tubelet_service::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::tubelet_service::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::tubelet_service::point2d* Arena::CreateMaybeMessage< ::tubelet_service::point2d >(Arena* arena) {
  return Arena::CreateInternal< ::tubelet_service::point2d >(arena);
}
template<> PROTOBUF_NOINLINE ::tubelet_service::observation* Arena::CreateMaybeMessage< ::tubelet_service::observation >(Arena* arena) {
  return Arena::CreateInternal< ::tubelet_service::observation >(arena);
}
template<> PROTOBUF_NOINLINE ::tubelet_service::tubelet2d* Arena::CreateMaybeMessage< ::tubelet_service::tubelet2d >(Arena* arena) {
  return Arena::CreateInternal< ::tubelet_service::tubelet2d >(arena);
}
template<> PROTOBUF_NOINLINE ::tubelet_service::get_version_response* Arena::CreateMaybeMessage< ::tubelet_service::get_version_response >(Arena* arena) {
  return Arena::CreateInternal< ::tubelet_service::get_version_response >(arena);
}
template<> PROTOBUF_NOINLINE ::tubelet_service::add_observation2d_request* Arena::CreateMaybeMessage< ::tubelet_service::add_observation2d_request >(Arena* arena) {
  return Arena::CreateInternal< ::tubelet_service::add_observation2d_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tubelet_service::get_all_tubelets2d_response* Arena::CreateMaybeMessage< ::tubelet_service::get_all_tubelets2d_response >(Arena* arena) {
  return Arena::CreateInternal< ::tubelet_service::get_all_tubelets2d_response >(arena);
}
template<> PROTOBUF_NOINLINE ::tubelet_service::move_window_request* Arena::CreateMaybeMessage< ::tubelet_service::move_window_request >(Arena* arena) {
  return Arena::CreateInternal< ::tubelet_service::move_window_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tubelet_service::set_window_position_request* Arena::CreateMaybeMessage< ::tubelet_service::set_window_position_request >(Arena* arena) {
  return Arena::CreateInternal< ::tubelet_service::set_window_position_request >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
